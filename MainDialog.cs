
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace GreatRune {
    using System.Diagnostics;
    using GreatRune.GameManagers;
    using Terminal.Gui;
    
    
    public partial class MainDialog {
        private string lblStatusOriginalText;
        private readonly object timerToken;

        private readonly MemoryManager memoryManager  = new();
        private readonly ProcessSelectorFSM processSelectorFSM;
        const string EldenRingProcessName = "eldenring";

        public MainDialog() {
            InitializeComponent();
            processSelectorFSM = new ProcessSelectorFSM(EldenRingProcessName,memoryManager);
            timerToken = Application.MainLoop.AddTimeout(TimeSpan.FromMilliseconds(200),TimerTick);

            btnQuit.Clicked += ()=>{
                Application.MainLoop.RemoveTimeout(timerToken);
                Application.RequestStop();
                };
            this.lblStatusOriginalText = lblStatus.Text.ToString();
            lblStatus.ColorScheme = null;

            chkGodrick.Enabled = false;
            chkMalenia.Enabled = false;
            chkMohg.Enabled = false;
            chkMorgott.Enabled = false;
            chkRadahn.Enabled = false;
            chkRadahn.Enabled =  false;
            chkRennala.Enabled = false;
            chkRykard.Enabled = false;

        }

#nullable enable
        Process? _gameProcess;
        public Process? GameProcess
        {
            get { return _gameProcess; }
            private set
            {
                chkAuto.Enabled = (value != null);
                if (_gameProcess!=value)
                    chkAuto.Checked = false;
                
                _gameProcess = value;
                lblStatus.Text = (value != null) ? $" Process found, ID : {value.Id}" : lblStatusOriginalText;
                lblStatus.ColorScheme = (value != null) ? gold : null;
            }
        }


        private bool TimerTick(MainLoop mainLoop)
        {
            processSelectorFSM.SearchForProcess(out Process? process);
            GameProcess = process;
            if (memoryManager.IsOpen)
                ReadGreatRunes();
            return true;
        }


        private void ReadGreatRunes()
        {
            if (!memoryManager.UpdateInventory())
                return;

            var greatRunes = memoryManager.GreatRunes();
            var activatedRunes = memoryManager.ActivatedRunes();

            chkGodrick.Checked = greatRunes.Godrick | activatedRunes.Godrick;
            chkMalenia.Checked = greatRunes.Malenia | activatedRunes.Malenia;
            chkMohg.Checked = greatRunes.Mohg | activatedRunes.Mohg;
            chkMorgott.Checked = greatRunes.Morgott | activatedRunes.Morgott;
            chkRadahn.Checked = greatRunes.Radahn | activatedRunes.Radahn;
            chkRennala.Checked = greatRunes.Rennala | activatedRunes.Rennala;
            chkRykard.Checked = greatRunes.Rykard | activatedRunes.Rykard;

            chkGodrick.ColorScheme = activatedRunes.Godrick ? gold :null;
            chkMalenia.ColorScheme = activatedRunes.Malenia ? gold :null;
            chkMohg.ColorScheme = activatedRunes.Mohg ? gold :null;
            chkMorgott.ColorScheme = activatedRunes.Morgott ? gold :null;
            chkRadahn.ColorScheme = activatedRunes.Radahn ? gold :null;
            chkRennala.ColorScheme = activatedRunes.Rennala ? gold :null;
            chkRykard.ColorScheme = activatedRunes.Rykard ? gold :null;

        }
    }
}
